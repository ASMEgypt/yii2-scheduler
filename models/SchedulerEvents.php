<?php

namespace execut\scheduler\models;

use execut\importScheduler\models\ImportSettingsVsSchedulerEvents;
use yii\helpers\ArrayHelper;

/**
* This is the model class for table "scheduler_events".
*
    * @property integer $id
    * @property string $start_date
    * @property string $end_date
    * @property string $event_name
    * @property string $text
    * @property string $rec_type
    * @property integer $event_length
    * @property integer $scheduler_event_id
    *
        * @property \execut\scheduler\models\ImportSettingsVsSchedulerEvents[] $importSettingsVsSchedulerEvents
        * @property \execut\scheduler\models\SchedulerEvents $schedulerEvent
        * @property \execut\scheduler\models\SchedulerEvents[] $schedulerEvents
    */
class SchedulerEvents extends \execut\scheduler\models\base\SchedulerEvents
{
    protected static $assigedColors = [];
    public $importSettingId = null;
    protected static $currentColor = 0;
    protected static $colors = [
        'red',
        'green',
        'blue',
        'yellow',
        'black',
        'white',
    ];

    public $color = null;
    public $replacedName = null;

    public function afterFind() {
        parent::afterFind();
        if (!isset(self::$assigedColors[$this->id])) {
            $color = '';
            for ($key = 0; $key < 3; $key++) {
                $number = rand(0, 150);
                if ($number < 10) {
                    $color .= '0';
                } else if ($number < 100) {
                    $color .= '0';
                }

                $color .= dechex($number);
            }

            self::$assigedColors[$this->id] = '#' . $color;
        }

        $this->color = self::$assigedColors[$this->id];

        $this->replacedName = $this->text;
    }

    /**
     * @inheritdoc
     */
    public function behaviors() {
        return ArrayHelper::merge(parent::behaviors(), []);
    }

    /**
     * @inheritdoc
     */
    public function rules() {
        return ArrayHelper::merge(parent::rules(), [
        ]);
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels() {
        return ArrayHelper::merge(parent::attributeLabels(), []);
    }

    public function attributes()
    {
        $attributes = parent::attributes(); // TODO: Change the autogenerated stub
        $attributes[] = 'color';
        $attributes[] = 'importSettingId';

        return $attributes;
    }

    public function beforeDelete()
    {
        $this->deleteRelations();

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        $ids = explode(',', $this->importSettingId);
        $this->deleteRelations();
        foreach ($ids as $id) {
            $vsImportSetting = new ImportSettingsVsSchedulerEvents([
                'import_setting_id' => $id,
                'scheduler_event_id' => $this->id,
            ]);
            $vsImportSetting->save();
        }
    }

    public function setAttribute($name, $value)
    {
        $ignoredAttributes = [
            'color',
            'importSettingId',
        ];
        if (in_array($name, $ignoredAttributes)) {
            $this->$name = $value;
            return;
        }

        parent::setAttribute($name, $value); // TODO: Change the autogenerated stub
    }

    public function getAttributes($names = null, $except = [])
    {
        $attibutes = parent::getAttributes($names, $except); // TODO: Change the autogenerated stub
        if (empty($attibutes['importSettingId'])) {
            $attibutes['importSettingId'] = implode(',', ArrayHelper::map($this->importSettingsVsSchedulerEvents, 'import_setting_id', 'import_setting_id'));
        }

        return $attibutes;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getImportSettingsVsSchedulerEvents()
    {
        return $this->hasMany(ImportSettingsVsSchedulerEvents::className(), ['scheduler_event_id' => 'id'])->inverseOf('schedulerEvent');
    }

    protected function deleteRelations()
    {
        ImportSettingsVsSchedulerEvents::deleteAll([
            'scheduler_event_id' => $this->id,
        ]);
    }
}
